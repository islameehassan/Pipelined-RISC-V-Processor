!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	kind	/[tags output] prepend "kind:" to k\/ (or K\/) field output, [xref and json output] kind in long-name form/
!_TAG_FIELD_DESCRIPTION	line	/Line number of tag definition/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Verilog	b,block	/blocks (begin, fork)/
!_TAG_KIND_DESCRIPTION!Verilog	c,constant	/constants (parameter, specparam)/
!_TAG_KIND_DESCRIPTION!Verilog	d,define	/text macros/
!_TAG_KIND_DESCRIPTION!Verilog	e,event	/events/
!_TAG_KIND_DESCRIPTION!Verilog	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Verilog	i,instance	/instances of module/
!_TAG_KIND_DESCRIPTION!Verilog	m,module	/modules/
!_TAG_KIND_DESCRIPTION!Verilog	n,net	/net data types/
!_TAG_KIND_DESCRIPTION!Verilog	p,port	/ports/
!_TAG_KIND_DESCRIPTION!Verilog	r,register	/variable data types/
!_TAG_KIND_DESCRIPTION!Verilog	t,task	/tasks/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PARSER_VERSION!Verilog	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/islam/AUC/junior/Fall 23/Architecture/Project/Milestone II/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/p6.0.20231029.0/
!_TAG_ROLE_DESCRIPTION!Verilog!module	decl	/declaring instances/
A	srcs/FullAdder.v	/^    input A, B,$/;"	kind:port	line:3	module:FullAdder
ALU	srcs/ALU.v	/^module ALU($/;"	kind:module	line:3
ALUOP_Branch	include/defines.v	/^`define     ALUOP_Branch          3'b010$/;"	kind:define	line:73
ALUOP_JALR	include/defines.v	/^`define     ALUOP_JALR            3'b011$/;"	kind:define	line:74
ALUOP_Load_Store	include/defines.v	/^`define     ALUOP_Load_Store      3'b001$/;"	kind:define	line:72
ALUOP_OTHER	include/defines.v	/^`define     ALUOP_OTHER           3'b111 $/;"	kind:define	line:75
ALUOP_R_I	include/defines.v	/^`define     ALUOP_R_I             3'b000$/;"	kind:define	line:71
ALU_ADD	include/defines.v	/^`define     ALU_ADD         4'b00_00$/;"	kind:define	line:57
ALU_AND	include/defines.v	/^`define     ALU_AND         4'b01_01$/;"	kind:define	line:61
ALU_C	srcs/Datapath.v	/^    ALU_ControlUnit ALU_C(.aluop(aluop), .func3(instruction[14:12]), .func7bit(instruction[30]),/;"	kind:instance	line:42	module:Datapath	typeref:module:ALU_ControlUnit
ALU_ControlUnit	srcs/ALU_ControlUnit.v	/^module ALU_ControlUnit($/;"	kind:module	line:3
ALU_OR	include/defines.v	/^`define     ALU_OR          4'b01_00$/;"	kind:define	line:60
ALU_PASS	include/defines.v	/^`define     ALU_PASS        4'b00_11$/;"	kind:define	line:59
ALU_SLL	include/defines.v	/^`define     ALU_SLL         4'b10_01$/;"	kind:define	line:65
ALU_SLT	include/defines.v	/^`define     ALU_SLT         4'b11_01$/;"	kind:define	line:66
ALU_SLTU	include/defines.v	/^`define     ALU_SLTU        4'b11_11$/;"	kind:define	line:67
ALU_SRA	include/defines.v	/^`define     ALU_SRA         4'b10_10$/;"	kind:define	line:64
ALU_SRL	include/defines.v	/^`define     ALU_SRL         4'b10_00$/;"	kind:define	line:63
ALU_SUB	include/defines.v	/^`define     ALU_SUB         4'b00_01$/;"	kind:define	line:58
ALU_XOR	include/defines.v	/^`define     ALU_XOR         4'b01_11$/;"	kind:define	line:62
ALU_data2	srcs/Datapath.v	/^    wire [31:0] ALU_data2;                                          \/\/ ALU$/;"	kind:net	line:18	module:Datapath
ALU_result	srcs/Datapath.v	/^    wire [31:0] ALU_result;                                         \/\/ ALU - DataMem$/;"	kind:net	line:19	module:Datapath
Anode	RISCV.v	/^    output [3:0] Anode, $/;"	kind:port	line:28	module:RISCV
B	srcs/FullAdder.v	/^    input A, B,$/;"	kind:port	line:3	module:FullAdder
BCD	srcs/BCD.v	/^module BCD ( $/;"	kind:module	line:3
BR_BEQ	include/defines.v	/^`define     BR_BEQ          3'b000$/;"	kind:define	line:48
BR_BGE	include/defines.v	/^`define     BR_BGE          3'b101$/;"	kind:define	line:51
BR_BGEU	include/defines.v	/^`define     BR_BGEU         3'b111$/;"	kind:define	line:53
BR_BLT	include/defines.v	/^`define     BR_BLT          3'b100$/;"	kind:define	line:50
BR_BLTU	include/defines.v	/^`define     BR_BLTU         3'b110$/;"	kind:define	line:52
BR_BNE	include/defines.v	/^`define     BR_BNE          3'b001$/;"	kind:define	line:49
BranchingUnit	srcs/BranchingUnit.v	/^module BranchingUnit($/;"	kind:module	line:6
CU	srcs/Datapath.v	/^    ControlUnit CU(.inst(instruction[6:2]), .branch(branch), .memread(memread), .memtoreg(memtor/;"	kind:instance	line:40	module:Datapath	typeref:module:ControlUnit
Clock	RISCV.v	/^module RISCV(input Clock,$/;"	kind:port	line:23	module:RISCV
ControlUnit	srcs/ControlUnit.v	/^module ControlUnit($/;"	kind:module	line:3
DFlipFlop	srcs/DFlipFlop.v	/^module DFlipFlop($/;"	kind:module	line:23
DM	srcs/Datapath.v	/^    DataMem DM(.clk(clk), .memread(memread), .memwrite(memwrite), .addr(ALU_result[5:0]), .data_/;"	kind:instance	line:53	module:Datapath	typeref:module:DataMem
DM_result	srcs/Datapath.v	/^    wire [31:0] DM_result;                                          \/\/ DataMem$/;"	kind:net	line:21	module:Datapath
DataMem	srcs/DataMem.v	/^module DataMem($/;"	kind:module	line:3
DataPath_tb	DataPath_tb.v	/^module DataPath_tb();$/;"	kind:module	line:2
Datapath	srcs/Datapath.v	/^module Datapath($/;"	kind:module	line:3
F3_ADD	include/defines.v	/^`define     F3_ADD          3'b000$/;"	kind:define	line:33
F3_AND	include/defines.v	/^`define     F3_AND          3'b111$/;"	kind:define	line:40
F3_LBU	include/defines.v	/^`define     F3_LBU          3'b100$/;"	kind:define	line:45
F3_LB_SB	include/defines.v	/^`define     F3_LB_SB        3'b000$/;"	kind:define	line:42
F3_LHU	include/defines.v	/^`define     F3_LHU          3'b101$/;"	kind:define	line:46
F3_LH_SH	include/defines.v	/^`define     F3_LH_SH        3'b001$/;"	kind:define	line:43
F3_LW_SW	include/defines.v	/^`define     F3_LW_SW        3'b010$/;"	kind:define	line:44
F3_OR	include/defines.v	/^`define     F3_OR           3'b110$/;"	kind:define	line:39
F3_SLL	include/defines.v	/^`define     F3_SLL          3'b001$/;"	kind:define	line:34
F3_SLT	include/defines.v	/^`define     F3_SLT          3'b010$/;"	kind:define	line:35
F3_SLTU	include/defines.v	/^`define     F3_SLTU         3'b011$/;"	kind:define	line:36
F3_SRL	include/defines.v	/^`define     F3_SRL          3'b101$/;"	kind:define	line:38
F3_XOR	include/defines.v	/^`define     F3_XOR          3'b100$/;"	kind:define	line:37
FA	srcs/RCA.v	/^            FullAdder FA(a[i], b[i],cin[i], sum[i], cin[i + 1]);$/;"	kind:instance	line:11	module:RCA	typeref:module:FullAdder
FF	srcs/Nbit_Register.v	/^        DFlipFlop FF(clk, rst, data[i], q[i]);$/;"	kind:instance	line:19	module:Nbit_Register	typeref:module:DFlipFlop
Four_Digit_Seven_Segment_Driver	srcs/Four_Digit_Seven_Segment_Driver.v	/^module Four_Digit_Seven_Segment_Driver ( $/;"	kind:module	line:23
FullAdder	srcs/FullAdder.v	/^module FullAdder($/;"	kind:module	line:2
HaltingUnit	srcs/HaltingUnit.v	/^module HaltingUnit($/;"	kind:module	line:8
IG	srcs/Datapath.v	/^    ImmGen IG(.inst(instruction), .gen_out(gen_out));    $/;"	kind:instance	line:41	module:Datapath	typeref:module:ImmGen
IM	srcs/Datapath.v	/^    InstMem IM(.addr(PC), .data_out(instruction)); $/;"	kind:instance	line:35	module:Datapath	typeref:module:InstMem
IR	srcs/ImmGen.v	/^	input  wire [31:0]  IR,$/;"	kind:port	line:4	module:ImmGen
IR_funct3	include/defines.v	/^`define     IR_funct3       14:12$/;"	kind:define	line:16
IR_funct7	include/defines.v	/^`define     IR_funct7       31:25$/;"	kind:define	line:17
IR_opcode	include/defines.v	/^`define     IR_opcode       6:2$/;"	kind:define	line:15
IR_rd	include/defines.v	/^`define     IR_rd           11:7$/;"	kind:define	line:14
IR_rs1	include/defines.v	/^`define     IR_rs1          19:15$/;"	kind:define	line:12
IR_rs2	include/defines.v	/^`define     IR_rs2          24:20$/;"	kind:define	line:13
IR_shamt	include/defines.v	/^`define     IR_shamt        24:20$/;"	kind:define	line:18
Imm	srcs/ImmGen.v	/^    output reg  [31:0]  Imm$/;"	kind:port	line:5	module:ImmGen
ImmGen	srcs/ImmGen.v	/^module ImmGen($/;"	kind:module	line:3
InstMem	srcs/InstMem.v	/^module InstMem($/;"	kind:module	line:23
LED_out	RISCV.v	/^    output [6:0] LED_out,$/;"	kind:port	line:29	module:RISCV
Mem	srcs/DataMem.v	/^    reg [7: 0] Mem[0: 255];$/;"	kind:register	line:12	module:DataMem
Mem	srcs/InstMem.v	/^    reg [31: 0] Mem [0: 63];$/;"	kind:register	line:27	module:InstMem
Mux_2x1	srcs/Mux_2x1.v	/^module Mux_2x1($/;"	kind:module	line:23
N	srcs/Nbit_Register.v	/^module Nbit_Register#(parameter N = 8)($/;"	kind:constant	line:5	module:Nbit_Register
N	srcs/Nbit_ShiftLeftBy1.v	/^module Nbit_ShiftLeftBy1 #(parameter N = 8)($/;"	kind:constant	line:2	module:Nbit_ShiftLeftBy1
N	srcs/Nbit_mux2to1.v	/^module Nbit_mux2to1#(parameter N = 8)($/;"	kind:constant	line:3	module:Nbit_mux2to1
N	srcs/RCA.v	/^module RCA #(parameter N = 8)(input [N - 1: 0] a, b, output[N: 0] sum);$/;"	kind:constant	line:3	module:RCA
N	srcs/RegFile.v	/^module RegFile#(parameter N = 32)($/;"	kind:constant	line:23	module:RegFile
Nbit_Register	srcs/Nbit_Register.v	/^module Nbit_Register#(parameter N = 8)($/;"	kind:module	line:5
Nbit_ShiftLeftBy1	srcs/Nbit_ShiftLeftBy1.v	/^module Nbit_ShiftLeftBy1 #(parameter N = 8)($/;"	kind:module	line:2
Nbit_mux2to1	srcs/Nbit_mux2to1.v	/^module Nbit_mux2to1#(parameter N = 8)($/;"	kind:module	line:3
OPCODE	include/defines.v	/^`define     OPCODE          IR[`IR_opcode]$/;"	kind:define	line:55
OPCODE_AUIPC	include/defines.v	/^`define     OPCODE_AUIPC                5'b00_101$/;"	kind:define	line:27
OPCODE_Arith_I	include/defines.v	/^`define     OPCODE_Arith_I              5'b00_100$/;"	kind:define	line:25
OPCODE_Arith_R	include/defines.v	/^`define     OPCODE_Arith_R              5'b01_100$/;"	kind:define	line:26
OPCODE_Branch	include/defines.v	/^`define     OPCODE_Branch               5'b11_000$/;"	kind:define	line:20
OPCODE_Custom	include/defines.v	/^`define     OPCODE_Custom               5'b10_001$/;"	kind:define	line:31
OPCODE_JAL	include/defines.v	/^`define     OPCODE_JAL                  5'b11_011$/;"	kind:define	line:24
OPCODE_JALR	include/defines.v	/^`define     OPCODE_JALR                 5'b11_001$/;"	kind:define	line:23
OPCODE_LUI	include/defines.v	/^`define     OPCODE_LUI                  5'b01_101$/;"	kind:define	line:28
OPCODE_Load	include/defines.v	/^`define     OPCODE_Load                 5'b00_000$/;"	kind:define	line:21
OPCODE_SYSTEM	include/defines.v	/^`define     OPCODE_SYSTEM               5'b11_100$/;"	kind:define	line:29
OPCODE_SYSTEM_FENCE	include/defines.v	/^`define     OPCODE_SYSTEM_FENCE         5'b00_111 $/;"	kind:define	line:30
OPCODE_Store	include/defines.v	/^`define     OPCODE_Store                5'b01_000$/;"	kind:define	line:22
PC	srcs/Datapath.v	/^    wire [31:0] PC;$/;"	kind:net	line:11	module:Datapath
Pipelined-RISC-V-Processor	README.md	/^# Pipelined-RISC-V-Processor$/;"	kind:chapter	line:1
RCA	srcs/RCA.v	/^module RCA #(parameter N = 8)(input [N - 1: 0] a, b, output[N: 0] sum);$/;"	kind:module	line:3
RCA_result	srcs/Datapath.v	/^    wire [31:0] RCA_result;                                         \/\/ RCA$/;"	kind:net	line:23	module:Datapath
RF	srcs/Datapath.v	/^    RegFile RF(.readreg1(instruction[19:15]), .readreg2(instruction[24:20]), .writereg(instructi/;"	kind:instance	line:39	module:Datapath	typeref:module:RegFile
RF_data1	srcs/Datapath.v	/^    wire [31:0] RF_data1, RF_data2, RF_writedata;                   \/\/ RegFile - ALU - DataMem$/;"	kind:net	line:13	module:Datapath
RF_data2	srcs/Datapath.v	/^    wire [31:0] RF_data1, RF_data2, RF_writedata;                   \/\/ RegFile - ALU - DataMem$/;"	kind:net	line:13	module:Datapath
RF_writedata	srcs/Datapath.v	/^    wire [31:0] RF_data1, RF_data2, RF_writedata;                   \/\/ RegFile - ALU - DataMem$/;"	kind:net	line:13	module:Datapath
RISCV	RISCV.v	/^module RISCV(input Clock,$/;"	kind:module	line:23
RegFile	srcs/RegFile.v	/^module RegFile#(parameter N = 32)($/;"	kind:module	line:23
Reset	DataPath_tb.v	/^    reg Reset;$/;"	kind:register	line:8	module:DataPath_tb
Reset	RISCV.v	/^    input Reset,$/;"	kind:port	line:24	module:RISCV
SL	srcs/Datapath.v	/^    Nbit_ShiftLeftBy1 #(32) SL(.a(gen_out), .b(SL_result));$/;"	kind:instance	line:60	module:Datapath	typeref:module:Nbit_ShiftLeftBy1
SL_result	srcs/Datapath.v	/^    wire [31:0] SL_result;                                          \/\/ Nbit_ShiftLeftBy1 - RCA$/;"	kind:net	line:22	module:Datapath
SSD_Clock	DataPath_tb.v	/^    reg SSD_Clock;$/;"	kind:register	line:11	module:DataPath_tb
SSD_Clock	RISCV.v	/^    input SSD_Clock, $/;"	kind:port	line:27	module:RISCV
SYS_EC_EB	include/defines.v	/^`define     SYS_EC_EB       3'b000	    $/;"	kind:define	line:69
Shifter	srcs/Shifter.v	/^module Shifter($/;"	kind:module	line:5
ZeroFlag	srcs/Datapath.v	/^    wire ZeroFlag;                                                  \/\/ ALU$/;"	kind:net	line:20	module:Datapath
a	srcs/ALU.v	/^    input   wire [31:0] a, b,$/;"	kind:port	line:4	module:ALU
a	srcs/Mux_2x1.v	/^    input a, b,$/;"	kind:port	line:24	module:Mux_2x1
a	srcs/Nbit_ShiftLeftBy1.v	/^   input[N-1:0] a,$/;"	kind:port	line:3	module:Nbit_ShiftLeftBy1
a	srcs/Nbit_mux2to1.v	/^    input [N-1:0] a, b,$/;"	kind:port	line:4	module:Nbit_mux2to1
a	srcs/RCA.v	/^module RCA #(parameter N = 8)(input [N - 1: 0] a, b, output[N: 0] sum);$/;"	kind:port	line:3	module:RCA
a	srcs/Shifter.v	/^    input[31: 0] a,$/;"	kind:port	line:6	module:Shifter
add	srcs/ALU.v	/^    wire [31:0] add, sub, op_b;$/;"	kind:net	line:11	module:ALU
addr	srcs/DataMem.v	/^    input [32:0] addr,$/;"	kind:port	line:7	module:DataMem
addr	srcs/InstMem.v	/^    input [31:0] addr,$/;"	kind:port	line:24	module:InstMem
alu	srcs/Datapath.v	/^    ALU alu(.A(RF_data1), .B(ALU_data2), .sel(alusel), .ALUOutput(ALU_result), .ZeroFlag(ZeroFla/;"	kind:instance	line:48	module:Datapath	typeref:module:ALU
aluop	srcs/ALU_ControlUnit.v	/^    input [2: 0] aluop,$/;"	kind:port	line:4	module:ALU_ControlUnit
aluop	srcs/ControlUnit.v	/^    output reg [2: 0] aluop$/;"	kind:port	line:6	module:ControlUnit
aluop	srcs/Datapath.v	/^    wire [1:0] aluop;                                               \/\/ ControlUnit - ALU_Contr/;"	kind:net	line:15	module:Datapath
alusel	srcs/ALU.v	/^	input   wire [3:0]  alusel$/;"	kind:port	line:8	module:ALU
alusel	srcs/ALU_ControlUnit.v	/^    output reg [3: 0] alusel$/;"	kind:port	line:7	module:ALU_ControlUnit
alusel	srcs/Datapath.v	/^    wire [3:0] alusel;                                              \/\/ ALU_ControlUnit - ALU$/;"	kind:net	line:17	module:Datapath
alusel	srcs/Shifter.v	/^    input[1: 0] alusel,$/;"	kind:port	line:8	module:Shifter
alusrc	srcs/ControlUnit.v	/^    output reg branch, memread, memtoreg, memwrite, alusrc, regwrite, regwrite_sel, jalr_jump$/;"	kind:port	line:5	module:ControlUnit
alusrc	srcs/Datapath.v	/^    wire branch, memread, memtoreg, memwrite, alusrc, regwrite;     \/\/ ControlUnit - DataMem$/;"	kind:net	line:14	module:Datapath
anode	srcs/Four_Digit_Seven_Segment_Driver.v	/^    output reg [3:0] anode, $/;"	kind:port	line:26	module:Four_Digit_Seven_Segment_Driver
b	srcs/ALU.v	/^    input   wire [31:0] a, b,$/;"	kind:port	line:4	module:ALU
b	srcs/Mux_2x1.v	/^    input a, b,$/;"	kind:port	line:24	module:Mux_2x1
b	srcs/Nbit_ShiftLeftBy1.v	/^   output[N-1:0] b$/;"	kind:port	line:4	module:Nbit_ShiftLeftBy1
b	srcs/Nbit_mux2to1.v	/^    input [N-1:0] a, b,$/;"	kind:port	line:4	module:Nbit_mux2to1
b	srcs/RCA.v	/^module RCA #(parameter N = 8)(input [N - 1: 0] a, b, output[N: 0] sum);$/;"	kind:port	line:3	module:RCA
branch	srcs/ControlUnit.v	/^    output reg branch, memread, memtoreg, memwrite, alusrc, regwrite, regwrite_sel, jalr_jump$/;"	kind:port	line:5	module:ControlUnit
branch	srcs/Datapath.v	/^    wire branch, memread, memtoreg, memwrite, alusrc, regwrite;     \/\/ ControlUnit - DataMem$/;"	kind:net	line:14	module:Datapath
carry	srcs/FullAdder.v	/^    output carry$/;"	kind:port	line:6	module:FullAdder
cf	srcs/ALU.v	/^	output  wire  cf, zf, vf, sf, \/\/ carry, zero, overflow and sign flags$/;"	kind:port	line:7	module:ALU
cf	srcs/BranchingUnit.v	/^    input cf, zf, vf, sf,$/;"	kind:port	line:8	module:BranchingUnit
cfa	srcs/ALU.v	/^    wire cfa, cfs;$/;"	kind:net	line:12	module:ALU
cfs	srcs/ALU.v	/^    wire cfa, cfs;$/;"	kind:net	line:12	module:ALU
cin	srcs/FullAdder.v	/^    input cin,$/;"	kind:port	line:4	module:FullAdder
cin	srcs/RCA.v	/^    wire [N: 0] cin;$/;"	kind:net	line:5	module:RCA
clk	DataPath_tb.v	/^    reg clk;$/;"	kind:register	line:7	module:DataPath_tb
clk	srcs/DFlipFlop.v	/^    input clk,$/;"	kind:port	line:24	module:DFlipFlop
clk	srcs/DataMem.v	/^    input clk,$/;"	kind:port	line:4	module:DataMem
clk	srcs/Datapath.v	/^    input clk,$/;"	kind:port	line:4	module:Datapath
clk	srcs/Four_Digit_Seven_Segment_Driver.v	/^    input clk,$/;"	kind:port	line:24	module:Four_Digit_Seven_Segment_Driver
clk	srcs/Nbit_Register.v	/^    input clk,$/;"	kind:port	line:6	module:Nbit_Register
clk	srcs/RegFile.v	/^    input clk,$/;"	kind:port	line:24	module:RegFile
clk_period	DataPath_tb.v	/^    localparam clk_period = 20;$/;"	kind:constant	line:4	module:DataPath_tb
d	srcs/DFlipFlop.v	/^    input d,$/;"	kind:port	line:26	module:DFlipFlop
d	srcs/Nbit_Register.v	/^    input[N-1:0] d,$/;"	kind:port	line:9	module:Nbit_Register
data	srcs/Nbit_Register.v	/^    wire[N-1:0] data;$/;"	kind:net	line:15	module:Nbit_Register
data_in	srcs/DataMem.v	/^    input [31:0] data_in,$/;"	kind:port	line:8	module:DataMem
data_out	srcs/DataMem.v	/^    output reg [31:0] data_out$/;"	kind:port	line:9	module:DataMem
data_out	srcs/InstMem.v	/^    output [31:0] data_out$/;"	kind:port	line:25	module:InstMem
dp	DataPath_tb.v	/^    Datapath dp(clk, Reset, ledSel, ssdSel, leds, ssd);$/;"	kind:instance	line:15	module:DataPath_tb	typeref:module:Datapath
dp	RISCV.v	/^Datapath dp(Clock, Reset, ledSel, ssdSel, leds, num_to_be_displayed);$/;"	kind:instance	line:36	module:RISCV	typeref:module:Datapath
ebreak_bit	srcs/HaltingUnit.v	/^    input ebreak_bit,   \/\/ bit 20 in ebreak, used to set halt to 1 automatically$/;"	kind:port	line:10	module:HaltingUnit
func3	srcs/ALU_ControlUnit.v	/^    input [2: 0] func3,$/;"	kind:port	line:5	module:ALU_ControlUnit
func3	srcs/BranchingUnit.v	/^    input [2:0] func3,$/;"	kind:port	line:7	module:BranchingUnit
func3	srcs/DataMem.v	/^    input func3,$/;"	kind:port	line:6	module:DataMem
func7bit	srcs/ALU_ControlUnit.v	/^    input func7bit,$/;"	kind:port	line:6	module:ALU_ControlUnit
gen_out	srcs/Datapath.v	/^    wire [31:0] gen_out;                                            \/\/ ImmGen - Nbit_ShiftLeft/;"	kind:net	line:16	module:Datapath
halt	srcs/HaltingUnit.v	/^    output halt$/;"	kind:port	line:11	module:HaltingUnit
hundreds	srcs/BCD.v	/^output reg [3:0] hundreds, $/;"	kind:port	line:6	module:BCD
i	srcs/BCD.v	/^    integer i; $/;"	kind:register	line:10	module:BCD
i	srcs/Nbit_Register.v	/^    genvar i;$/;"	kind:register	line:13	module:Nbit_Register
i	srcs/Nbit_mux2to1.v	/^    genvar i;$/;"	kind:register	line:9	module:Nbit_mux2to1
i	srcs/RCA.v	/^    genvar i;$/;"	kind:register	line:6	module:RCA
i	srcs/RegFile.v	/^    integer i;$/;"	kind:register	line:35	module:RegFile
inst	srcs/ControlUnit.v	/^    input [4: 0]inst,$/;"	kind:port	line:4	module:ControlUnit
inst	srcs/HaltingUnit.v	/^    input[4: 0] inst,$/;"	kind:port	line:9	module:HaltingUnit
instruction	srcs/Datapath.v	/^    wire [31:0] instruction;                                        \/\/ InstMem - ControlUnit -/;"	kind:net	line:12	module:Datapath
ledSel	DataPath_tb.v	/^    reg [1:0] ledSel;$/;"	kind:register	line:9	module:DataPath_tb
ledSel	RISCV.v	/^    input [1:0] ledSel,$/;"	kind:port	line:25	module:RISCV
ledSel	srcs/Datapath.v	/^    input [1:0] ledSel,$/;"	kind:port	line:6	module:Datapath
led_activating_counter	srcs/Four_Digit_Seven_Segment_Driver.v	/^    wire [1:0] led_activating_counter;$/;"	kind:net	line:32	module:Four_Digit_Seven_Segment_Driver
led_bcd	srcs/Four_Digit_Seven_Segment_Driver.v	/^    reg [3:0] led_bcd;$/;"	kind:register	line:30	module:Four_Digit_Seven_Segment_Driver
led_out	srcs/Four_Digit_Seven_Segment_Driver.v	/^    output reg [6:0] led_out$/;"	kind:port	line:27	module:Four_Digit_Seven_Segment_Driver
leds	DataPath_tb.v	/^    wire [15:0] leds;$/;"	kind:net	line:12	module:DataPath_tb
leds	RISCV.v	/^    output [15:0] leds$/;"	kind:port	line:30	module:RISCV
leds	srcs/Datapath.v	/^    output reg [15:0] leds,$/;"	kind:port	line:8	module:Datapath
load	srcs/Nbit_Register.v	/^    input load,$/;"	kind:port	line:8	module:Nbit_Register
memread	srcs/ControlUnit.v	/^    output reg branch, memread, memtoreg, memwrite, alusrc, regwrite, regwrite_sel, jalr_jump$/;"	kind:port	line:5	module:ControlUnit
memread	srcs/DataMem.v	/^    input memread, memwrite,$/;"	kind:port	line:5	module:DataMem
memread	srcs/Datapath.v	/^    wire branch, memread, memtoreg, memwrite, alusrc, regwrite;     \/\/ ControlUnit - DataMem$/;"	kind:net	line:14	module:Datapath
memtoreg	srcs/ControlUnit.v	/^    output reg branch, memread, memtoreg, memwrite, alusrc, regwrite, regwrite_sel, jalr_jump$/;"	kind:port	line:5	module:ControlUnit
memtoreg	srcs/Datapath.v	/^    wire branch, memread, memtoreg, memwrite, alusrc, regwrite;     \/\/ ControlUnit - DataMem$/;"	kind:net	line:14	module:Datapath
memwrite	srcs/ControlUnit.v	/^    output reg branch, memread, memtoreg, memwrite, alusrc, regwrite, regwrite_sel, jalr_jump$/;"	kind:port	line:5	module:ControlUnit
memwrite	srcs/DataMem.v	/^    input memread, memwrite,$/;"	kind:port	line:5	module:DataMem
memwrite	srcs/Datapath.v	/^    wire branch, memread, memtoreg, memwrite, alusrc, regwrite;     \/\/ ControlUnit - DataMem$/;"	kind:net	line:14	module:Datapath
mux	srcs/Nbit_Register.v	/^        Mux_2x1 mux(.a(d[i]), .b(q[i]), .sel(load), .out(data[i])); $/;"	kind:instance	line:18	module:Nbit_Register	typeref:module:Mux_2x1
mux	srcs/Nbit_mux2to1.v	/^            Mux_2x1 mux(.a(a[i]), .b(b[i]), .sel(sel), .out(q[i]));$/;"	kind:instance	line:13	module:Nbit_mux2to1	typeref:module:Mux_2x1
new_PC	srcs/Datapath.v	/^    wire [31:0] new_PC;                                              $/;"	kind:net	line:24	module:Datapath
num	srcs/BCD.v	/^input [12:0] num, $/;"	kind:port	line:4	module:BCD
num	srcs/Four_Digit_Seven_Segment_Driver.v	/^    input [12:0] num, $/;"	kind:port	line:25	module:Four_Digit_Seven_Segment_Driver
num_to_be_displayed	RISCV.v	/^wire [12:0]num_to_be_displayed;$/;"	kind:net	line:34	module:RISCV
ones	srcs/BCD.v	/^output reg [3:0] ones $/;"	kind:port	line:8	module:BCD
op_b	srcs/ALU.v	/^    wire [31:0] add, sub, op_b;$/;"	kind:net	line:11	module:ALU
out	srcs/Mux_2x1.v	/^    output out$/;"	kind:port	line:26	module:Mux_2x1
pc	srcs/Datapath.v	/^    Nbit_Register #(32)pc(clk, rst, 1, new_PC, PC);$/;"	kind:instance	line:63	module:Datapath	typeref:module:Nbit_Register
q	srcs/DFlipFlop.v	/^    output reg q$/;"	kind:port	line:27	module:DFlipFlop
q	srcs/Nbit_Register.v	/^    output[N-1:0] q$/;"	kind:port	line:10	module:Nbit_Register
q	srcs/Nbit_mux2to1.v	/^    output[N-1:0] q$/;"	kind:port	line:6	module:Nbit_mux2to1
r	srcs/ALU.v	/^	output  reg  [31:0] r,$/;"	kind:port	line:6	module:ALU
r	srcs/BranchingUnit.v	/^    output reg r$/;"	kind:port	line:9	module:BranchingUnit
r	srcs/Shifter.v	/^    output reg[31: 0] r$/;"	kind:port	line:9	module:Shifter
rca	srcs/Datapath.v	/^    RCA #(32) rca(.a(PC), .b(SL_result), .sum(RCA_result));$/;"	kind:instance	line:61	module:Datapath	typeref:module:RCA
readdata1	srcs/RegFile.v	/^    output [N - 1 : 0] readdata1, readdata2$/;"	kind:port	line:29	module:RegFile
readdata2	srcs/RegFile.v	/^    output [N - 1 : 0] readdata1, readdata2$/;"	kind:port	line:29	module:RegFile
readreg1	srcs/RegFile.v	/^    input [4: 0] readreg1, readreg2, writereg,$/;"	kind:port	line:27	module:RegFile
readreg2	srcs/RegFile.v	/^    input [4: 0] readreg1, readreg2, writereg,$/;"	kind:port	line:27	module:RegFile
refresh_counter	srcs/Four_Digit_Seven_Segment_Driver.v	/^    reg [19:0] refresh_counter = 0; \/\/ 20-bit counter$/;"	kind:register	line:31	module:Four_Digit_Seven_Segment_Driver
reg_file	srcs/RegFile.v	/^    reg [N - 1: 0] reg_file[31: 0];$/;"	kind:register	line:33	module:RegFile
regwrite	srcs/ControlUnit.v	/^    output reg branch, memread, memtoreg, memwrite, alusrc, regwrite, regwrite_sel, jalr_jump$/;"	kind:port	line:5	module:ControlUnit
regwrite	srcs/Datapath.v	/^    wire branch, memread, memtoreg, memwrite, alusrc, regwrite;     \/\/ ControlUnit - DataMem$/;"	kind:net	line:14	module:Datapath
regwrite	srcs/RegFile.v	/^    input regwrite,$/;"	kind:port	line:26	module:RegFile
regwrite_sel	srcs/ControlUnit.v	/^    output reg branch, memread, memtoreg, memwrite, alusrc, regwrite, regwrite_sel, jalr_jump$/;"	kind:port	line:5	module:ControlUnit
rst	srcs/DFlipFlop.v	/^    input rst,$/;"	kind:port	line:25	module:DFlipFlop
rst	srcs/Datapath.v	/^    input rst,$/;"	kind:port	line:5	module:Datapath
rst	srcs/Nbit_Register.v	/^    input rst,$/;"	kind:port	line:7	module:Nbit_Register
rst	srcs/RegFile.v	/^    input rst,$/;"	kind:port	line:25	module:RegFile
sel	srcs/Mux_2x1.v	/^    input sel,$/;"	kind:port	line:25	module:Mux_2x1
sel	srcs/Nbit_mux2to1.v	/^    input sel,$/;"	kind:port	line:5	module:Nbit_mux2to1
sf	srcs/ALU.v	/^	output  wire  cf, zf, vf, sf, \/\/ carry, zero, overflow and sign flags$/;"	kind:port	line:7	module:ALU
sf	srcs/BranchingUnit.v	/^    input cf, zf, vf, sf,$/;"	kind:port	line:8	module:BranchingUnit
sh	srcs/ALU.v	/^    wire[31:0] sh;$/;"	kind:net	line:21	module:ALU
shamt	srcs/ALU.v	/^	input   wire [4:0]  shamt,  \/\/ shift amount$/;"	kind:port	line:5	module:ALU
shamt	srcs/Shifter.v	/^    input[4: 0] shamt,$/;"	kind:port	line:7	module:Shifter
shifter0	srcs/ALU.v	/^    Shifter shifter0(.a(a), .shamt(shamt), .type(alusel[1:0]),  .r(sh));$/;"	kind:instance	line:23	module:ALU	typeref:module:Shifter
ssd	DataPath_tb.v	/^    wire [12:0] ssd;$/;"	kind:net	line:13	module:DataPath_tb
ssd	RISCV.v	/^Four_Digit_Seven_Segment_Driver ssd(SSD_Clock,num_to_be_displayed, Anode, LED_out);$/;"	kind:instance	line:37	module:RISCV	typeref:module:Four_Digit_Seven_Segment_Driver
ssd	srcs/Datapath.v	/^    output reg [12:0] ssd$/;"	kind:port	line:9	module:Datapath
ssdSel	DataPath_tb.v	/^    reg [3:0] ssdSel;$/;"	kind:register	line:10	module:DataPath_tb
ssdSel	RISCV.v	/^    input [3:0] ssdSel,$/;"	kind:port	line:26	module:RISCV
ssdSel	srcs/Datapath.v	/^    input [3:0] ssdSel,$/;"	kind:port	line:7	module:Datapath
sub	srcs/ALU.v	/^    wire [31:0] add, sub, op_b;$/;"	kind:net	line:11	module:ALU
sum	srcs/FullAdder.v	/^    output sum,$/;"	kind:port	line:5	module:FullAdder
sum	srcs/RCA.v	/^module RCA #(parameter N = 8)(input [N - 1: 0] a, b, output[N: 0] sum);$/;"	kind:port	line:3	module:RCA
tens	srcs/BCD.v	/^output reg [3:0] tens, $/;"	kind:port	line:7	module:BCD
thousands	srcs/BCD.v	/^output reg [3:0] thousands,$/;"	kind:port	line:5	module:BCD
vf	srcs/ALU.v	/^	output  wire  cf, zf, vf, sf, \/\/ carry, zero, overflow and sign flags$/;"	kind:port	line:7	module:ALU
vf	srcs/BranchingUnit.v	/^    input cf, zf, vf, sf,$/;"	kind:port	line:8	module:BranchingUnit
writedata	srcs/RegFile.v	/^    input [N - 1: 0] writedata,$/;"	kind:port	line:28	module:RegFile
writereg	srcs/RegFile.v	/^    input [4: 0] readreg1, readreg2, writereg,$/;"	kind:port	line:27	module:RegFile
zf	srcs/ALU.v	/^	output  wire  cf, zf, vf, sf, \/\/ carry, zero, overflow and sign flags$/;"	kind:port	line:7	module:ALU
zf	srcs/BranchingUnit.v	/^    input cf, zf, vf, sf,$/;"	kind:port	line:8	module:BranchingUnit
